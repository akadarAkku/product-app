{"version":3,"sources":["Product.js","ProductCategory.js","ProductListings.js","search.js","App.js","serviceWorker.js","index.js"],"names":["Product","name","price","style","stocked","backgroundColor","ProductCategory","category","products","$categoryRow","$productItems","map","product","$products","ProductListings","productsByCategory","forEach","console","log","push","hasOwnProperty","$productCategory","Search","setFilter","setSearch","useState","click","setClick","searchTerm","setSearchTerm","type","value","onChange","event","target","placeholder","checked","App","PRODUCTS","filter","search","filteredProducts","item","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.75ea5047.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Product = ({ name, price, stocked }) => {\r\n    const style ={};\r\n\r\n    if (stocked === false) {\r\n        style.backgroundColor = 'red';\r\n    }\r\n\r\n    return (\r\n        <tr style={style}>\r\n            <td>{name}</td>\r\n            <td>{price}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default Product;","import React from 'react';\r\nimport Product from \"./Product\";\r\n\r\n\r\nconst ProductCategory = ({category, products}) => {\r\n    const $categoryRow = [\r\n        <tr>{category}</tr>\r\n    ];\r\n    const $productItems = products.map(product => <Product {...product} />);\r\n\r\n    const $products = [...$categoryRow, ...$productItems];\r\n\r\n    return (\r\n        <>\r\n            {$products}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProductCategory;","import React from \"react\";\r\nimport ProductCategory from \"./ProductCategory\";\r\n\r\nconst ProductListings = ({ products }) => {\r\n\r\n    const productsByCategory = {};\r\n\r\n    // Fill productsByCategory with a key for each category\r\n    products.forEach(product => {\r\n        if (!productsByCategory[product.category]) {\r\n            productsByCategory[product.category] = [];\r\n        }\r\n    });\r\n\r\n    console.log(productsByCategory);\r\n\r\n    products.forEach(product => {\r\n        productsByCategory[product.category].push(product);\r\n    });\r\n\r\n    let $products = [];\r\n    // Fills $products with listings for categories and items\r\n    for (let category in productsByCategory) {\r\n        if (!productsByCategory.hasOwnProperty(category)) {\r\n            continue;\r\n        }\r\n\r\n        const products = productsByCategory[category];\r\n        const $productCategory = <ProductCategory category={category} products={products} />;\r\n\r\n        $products.push($productCategory);\r\n    }\r\n\r\n    console.log($products);\r\n\r\n    return (\r\n        <tbody>\r\n            {$products}\r\n        </tbody>\r\n    )\r\n};\r\n\r\nexport default ProductListings;","import React from \"react\";\r\nimport { useState } from 'react';\r\n\r\nfunction Search({setFilter, setSearch}) {\r\n  const [click, setClick] = useState(false)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  \r\n  const handleChange = () => {\r\n      if (!click) {setFilter(true)} else {setFilter(false)}\r\n      setClick( !click )\r\n    }\r\n  const handleInputChange = (event)=>{\r\n        setSearchTerm(event.target.value)\r\n        setSearch(event.target.value)\r\n    }\r\n    return (\r\n      <form>\r\n      <br />\r\n       <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"searchProduct\"\r\n            value={searchTerm}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Search for a product...\"\r\n          />\r\n          <br />\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={click}\r\n            onChange={handleChange}\r\n          />\r\n          Only show products in stock!\r\n        </label>\r\n       <br />\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, {useState} from 'react';\r\nimport ProductListings from \"./ProductListings\";\r\nimport Search from \"./search\"\r\n\r\nfunction App() {\r\n  const PRODUCTS = [\r\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\r\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\r\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\r\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\r\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\r\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\r\n  ];\r\n\r\n  const [filter, setFilter] = useState(false)\r\n  const [search, setSearch] = useState(\"\")\r\n  \r\n  const filteredProducts = PRODUCTS.filter(item => item.stocked === true)\r\n\r\n    \r\n  return (\r\n    <div className=\"App\">\r\n    <Search setFilter={setFilter} setSearch={setSearch} />\r\n      <table>\r\n        <thead>\r\n          <th>Name</th>\r\n          <th>Price</th>\r\n        </thead>\r\n        <ProductListings search={search} filter={filter} products={filter ? filteredProducts : PRODUCTS }/>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}